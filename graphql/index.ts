export const getAllUsers = `query UserCollection {
    userCollection (first: 10) {
      edges {
        node {
          name
          email
        }
      }
    }
  }`

// note that in garphQL the dollar sign is used to craete variables
// and when u say $input: ProjectCreateInput then u are creating a variable and its type is ProjectCreateInput
// which is an autogenerated type based on ur scehma
// the second line input: $input here u are giving the parameter input the value of var $input
export const createProjectMutation = `
	mutation CreateProject($input: ProjectCreateInput!) {
		projectCreate(input: $input) {
			project {
				id
				title
				desciption
				createdBy {
					email
					name
				}
			}
		}
	}
`;

export const updateProjectMutation = `
	mutation UpdateProject($id: ID!, $input: ProjectUpdateInput!) {
		projectUpdate(by: { id: $id }, input: $input) {
			project {
				id
				title
				desciption
				createdBy {
					email
					name
				}
			}
		}
	}
`;

export const deleteProjectMutation = `
  mutation DeleteProject($id: ID!) {
    projectDelete(by: { id: $id }) {
      deletedId
    }
  }
`;

export const createUserMutation = `
	mutation CreateUser($input: UserCreateInput!) {
		userCreate(input: $input) {
			user {
				name
				email
				avatarUrl
				desciption
				githubUrl
				linkedInUrl
				id
			}
		}
	}
`;

export const getAllProjectsQuery = `query ProjectCollection($endcursor:String) {
  projectSearch(first: 6,after: $endcursor) {
    pageInfo
    {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    edges 
    {
      node {
        title
        githubUrl
        desciption
        liveSiteUrl
        id
        image
        category
        createdBy {
          id
          email
          name
          avatarUrl
        }
      }
    }
  }
}
`
export const getBackwardProjectsQuery = `
query GetProjectsBackward($category: String, $startcursor: String) {
  projectSearch(before: $startcursor,last:3, filter: { category: { eq: $category } }) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    edges {
      node {
        title
        githubUrl
        desciption
        liveSiteUrl
        id
        image
        category
        createdBy {
          id
          email
          name
          avatarUrl
        }
      }
    }
  }
}
`
export const getAllProjectsBackwardQuery = `
query getAllProjectsBackwardQuery($startcursor: String) {
  projectSearch(before: $startcursor, last: 6) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    edges {
      node {
        title
        githubUrl
        desciption
        liveSiteUrl
        id
        image
        category
        createdBy {
          id
          email
          name
          avatarUrl
        }
      }
      cursor
    }
  }
}
`

export const projectsQuery = `
  query getProjects($category: String, $endcursor: String) {
    projectSearch(first: 3, after: $endcursor, filter: {category: {eq: $category}}) {
      pageInfo
    {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    edges 
    {
      node {
        title
        githubUrl
        desciption
        liveSiteUrl
        id
        image
        category
        createdBy {
          id
          email
          name
          avatarUrl
        }
      }
    }
    }
  }
`;


// ***********************************

export const projectsQuery1 = `

query ProjectCollection($category: String) {
  projectSearch(first:6,filter:{category: { eq:$category }}) {
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
    edges 
    {
      node {
        title
        githubUrl
        desciption
        liveSiteUrl
        id
        image
        category
        createdBy {
          id
          email
          name
          avatarUrl
        }
      }
    }
  }
}

`

// ***********************************

export const getProjectByIdQuery = `
  query GetProjectById($id: ID!) {
    project(by: { id: $id }) {
      id
      title
      desciption
      image
      liveSiteUrl
      githubUrl
      category
      createdBy {
        id
        name
        email
        avatarUrl
      }
    }
  }
`;

export const getUserQuery = `
  query GetUser($email: String!) {
    user(by: { email: $email }) {
      id
      name
      email
      avatarUrl
      desciption
      githubUrl
      linkedInUrl
    }
  }
`;

export const getProjectsOfUserQuery = `
  query getUserProjects($id: ID!, $last: Int = 4) {
    user(by: { id: $id }) {
      id
      name
      email
      desciption
      avatarUrl
      githubUrl
      linkedInUrl
      projects(last: $last) {
        edges {
          node {
            id
            title
            image
          }
        }
      }
    }
  }
`;

export const getAllUsersQuery = `query UserCollection {
  userCollection(first: 100) {
    edges {
      node {
        id
        name
        avatarUrl
      }
    }
  }
}`;